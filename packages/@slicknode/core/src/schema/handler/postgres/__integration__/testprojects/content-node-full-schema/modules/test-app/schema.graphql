enum Test_Enum {
  VALUE1
  VALUE2
}

type Test_User implements Node & Content {
  id: ID!
  string: String
  stringRequired: String!
  stringUnique: String @unique

  enum: Test_Enum
  enumUnique: Test_Enum @unique

  parent: Test_User
  parentUnique: Test_User @unique

  related: Test_Related
  relatedUnique: Test_Related @unique

  children: [Test_Post!]! @relation(
    path: "Test_User=parent.Test_User"
  )

  childrenList: [Test_User!]

  sections: [Test_Section!]
  section: Test_Section

  manager: Test_User! @relation(
    path: "Test_User=user.Test_Manager.manager=Test_User"
  )

  employees: [Test_User!]! @relation(
    path: "Test_User=manager.Test_Manager.user=Test_User"
  )

  friends: [Test_User!]! @relation(
    path: "Test_User=user.Test_Friend.friend=Test_User"
  )

  friendsContent: [Test_User!]! @relation(
    path: "Test_User=user.Test_FriendContent.friend=Test_User"
  )

  contentNode: ContentNode!
  locale: Locale!
  status: ContentStatus!
  createdBy: User
  createdAt: DateTime!
  lastUpdatedBy: User
  lastUpdatedAt: DateTime
  publishedAt: DateTime
  publishedBy: User
}

type Test_Friend implements Node {
  id: ID!
  user: Test_User!
  friend: Test_User!
}

type Test_FriendContent implements Node & Content {
  id: ID!
  user: Test_User!
  friend: Test_User!

  contentNode: ContentNode!
  locale: Locale!
  status: ContentStatus!
  createdBy: User
  createdAt: DateTime!
  lastUpdatedBy: User
  lastUpdatedAt: DateTime
  publishedAt: DateTime
  publishedBy: User
}

type Test_Manager implements Node {
  id: ID!
  manager: Test_User!
  user: Test_User! @unique
}

type Test_Related implements Node {
  id: ID!
  name: String
}

type Test_Connected implements Node & Content {
  id: ID!
  name: String

  contentNode: ContentNode!
  locale: Locale!
  status: ContentStatus!
  createdBy: User
  createdAt: DateTime!
  lastUpdatedBy: User
  lastUpdatedAt: DateTime
  publishedAt: DateTime
  publishedBy: User
}

type Test_Section1 implements Node & Content {
  id: ID!
  name: String

  contentNode: ContentNode!
  locale: Locale!
  status: ContentStatus!
  createdBy: User
  createdAt: DateTime!
  lastUpdatedBy: User
  lastUpdatedAt: DateTime
  publishedAt: DateTime
  publishedBy: User
}

type Test_Section2 implements Node & Content {
  id: ID!
  name: String

  contentNode: ContentNode!
  locale: Locale!
  status: ContentStatus!
  createdBy: User
  createdAt: DateTime!
  lastUpdatedBy: User
  lastUpdatedAt: DateTime
  publishedAt: DateTime
  publishedBy: User
}

union Test_Section = Test_Section1 | Test_Section2
